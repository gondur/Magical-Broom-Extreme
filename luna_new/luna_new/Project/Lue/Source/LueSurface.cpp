
//------------------------------------------------------------------------------------------------
// INCLUDE
//------------------------------------------------------------------------------------------------
#include "LueBase.h"
#include "LueSurface.h"

//------------------------------------------------------------------------------------------------
// NameSpace
//------------------------------------------------------------------------------------------------
using namespace Selene;

//------------------------------------------------------------------------------------------------
// for C Compiler
//------------------------------------------------------------------------------------------------
extern "C" {

//------------------------------------------------------------------------------------------------
// DEFINE
//------------------------------------------------------------------------------------------------
const Uint32 SURFACE_MAX = 1024;


//------------------------------------------------------------------------------------------------
// VARIABLE
//------------------------------------------------------------------------------------------------
static ISurface *g_pSurfaceTbl[SURFACE_MAX];


//------------------------------------------------------------------------------------------------
// EXTERN
//------------------------------------------------------------------------------------------------
extern IDevice *Lue_GetDevice( void );
extern IRender *Lue_GetRenderer( void );


//------------------------------------------------------------------------------------------------
/**
	@brief サーフェイス管理クラス初期化
	@author 葉迩倭

	サーフェイス関連の処理を初期化します。<BR>
	※この関数は公開されていません。
*/
//------------------------------------------------------------------------------------------------
void LueSurface_Initialize( void )
{
	for ( Sint32 i = 0; i < SURFACE_MAX; i++ )
	{
		g_pSurfaceTbl[i] = NULL;
	}
}


//------------------------------------------------------------------------------------------------
/**
	@brief サーフェイス管理クラス終了
	@author 葉迩倭

	サーフェイス関連の処理を終了します。<BR>
	※この関数は公開されていません。
*/
//------------------------------------------------------------------------------------------------
void LueSurface_Finalize( void )
{
	for ( Uint32 i = 0; i < SURFACE_MAX; i++ )
	{
		if ( g_pSurfaceTbl[i] != NULL )
		{
			g_pSurfaceTbl[i]->Release();
			g_pSurfaceTbl[i] = NULL;
		}
	}
}

//------------------------------------------------------------------------------------------------
/**
	@brief 未使用サーフェイスの検索
	@author 葉迩倭

	@return 未使用のサーフェイスハンドル

	未使用のサーフェイスオブジェクトの検索をします。<BR>
	※この関数は公開されていません。
*/
//------------------------------------------------------------------------------------------------
LUE_HANDLE LueSurface_SearchFreeHandle( void )
{
	for ( Uint32 i = 0; i < SURFACE_MAX; i++ )
	{
		if ( g_pSurfaceTbl[i] == NULL )
		{
			return i;
		}
	}

	return INVALID_LUE_HANDLE;
}

//------------------------------------------------------------------------------------------------
/**
	@brief サーフェイスの解放
	@author 葉迩倭

	@param Handle	[in] サーフェイスハンドル

	サーフェイスの解放を行います。
*/
//------------------------------------------------------------------------------------------------
void LueSurface_Release( LUE_HANDLE Handle )
{
	if ( Handle >= SURFACE_MAX ) return;

	if ( g_pSurfaceTbl[Handle] != NULL )
	{
		g_pSurfaceTbl[Handle]->Release();
		g_pSurfaceTbl[Handle] = NULL;
	}
}



} // extern "C"

