
//------------------------------------------------------------------------------------------------
// INCLUDE
//------------------------------------------------------------------------------------------------
#include "LueBase.h"
#include "LueVector2D.h"


//------------------------------------------------------------------------------------------------
// NameSpace
//------------------------------------------------------------------------------------------------
using namespace Selene;


//------------------------------------------------------------------------------------------------
// for C Compiler
//------------------------------------------------------------------------------------------------
extern "C" {


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルに値を設定
	@author 葉迩倭

	@param fPx	[in] x値
	@param fPy	[in] y値

	@return 値設定後のベクトル

	値をベクトルに設定し、そのベクトルを取得します。
*/
//------------------------------------------------------------------------------------------------
LueVector2D LueVector2D_Set( float fPx, float fPy )
{
	LueVector2D vOut = { fPx, fPy };
	return vOut;
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトル同士の加算
	@author 葉迩倭

	@param In1	[in] 演算元ベクトル
	@param In2	[in] 演算元ベクトル

	@return 演算後のベクトル

	２つのベクトルの各成分を加算し、<BR>
	その結果のベクトルを取得します。
*/
//------------------------------------------------------------------------------------------------
LueVector2D LueVector2D_Add( LueVector2D In1, LueVector2D In2 )
{
	LueVector2D vOut = { In1.x + In2.x, In1.y + In2.y };
	return vOut;
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトル同士の減算
	@author 葉迩倭

	@param In1	[in] 演算元ベクトル
	@param In2	[in] 演算元ベクトル

	@return 演算後のベクトル

	２つのベクトルの各成分を減算し、<BR>
	その結果のベクトルを取得します。
*/
//------------------------------------------------------------------------------------------------
LueVector2D LueVector2D_Sub( LueVector2D In1, LueVector2D In2 )
{
	LueVector2D vOut = { In1.x - In2.x, In1.y - In2.y };
	return vOut;
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルの長さの二乗を取得
	@author 葉迩倭

	@param In	[in] 演算元ベクトル

	@return 長さの二乗

	指定ベクトルの長さの二乗を取得します。
*/
//------------------------------------------------------------------------------------------------
float LueVector2D_LengthSq( LueVector2D In )
{
	CVector2D v( In.x, In.y );
	return v.LengthSq();
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルの長さを取得
	@author 葉迩倭

	@param In	[in] 演算元ベクトル

	@return 長さ

	指定ベクトルの長さを取得します。
*/
//------------------------------------------------------------------------------------------------
float LueVector2D_Length( LueVector2D In )
{
	CVector2D v( In.x, In.y );
	return v.Length();
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルの正規化
	@author 葉迩倭

	@param In	[in] 演算元ベクトル

	@return 正規化後のベクトル

	指定ベクトルの正規化を行います。
*/
//------------------------------------------------------------------------------------------------
LueVector2D LueVector2D_Normalize( LueVector2D In )
{
	CVector2D v( In.x, In.y );
	v.Normalize();

	LueVector2D vOut = { v.x, v.y };
	return vOut;
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルの内積を取得
	@author 葉迩倭

	@param In1	[in] 演算元ベクトル
	@param In2	[in] 演算元ベクトル

	@return 内積値

	指定ベクトルの内積を取得します。
*/
//------------------------------------------------------------------------------------------------
float LueVector2D_DotProduct( LueVector2D In1, LueVector2D In2 )
{
	CVector2D v1( In1.x, In1.y );
	CVector2D v2( In2.x, In2.y );

	return v1.Dot( v2 );
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルの外積を取得
	@author 葉迩倭

	@param In1	[in] 演算元ベクトル
	@param In2	[in] 演算元ベクトル

	@return 外積値

	指定ベクトルの外積を取得します。
*/
//------------------------------------------------------------------------------------------------
float LueVector2D_CrossProduct( LueVector2D In1, LueVector2D In2 )
{
	CVector2D v1( In1.x, In1.y );
	CVector2D v2( In2.x, In2.y );

	return v1.Dot( v2 );
}


//------------------------------------------------------------------------------------------------
/**
	@brief ベクトルの反射を取得
	@author 葉迩倭

	@param In1	[in] 入射ベクトル
	@param In2	[in] 反射軸ベクトル

	@return 反射後のベクトル

	入射ベクトルを反射軸ベクトルを法泉とする平面で反射した時の<BR>
	反射後のベクトルを取得します。
*/
//------------------------------------------------------------------------------------------------
LueVector2D LueVector2D_Reflect( LueVector2D In1, LueVector2D In2 )
{
	CVector2D v1( In1.x, In1.y );
	CVector2D v2( In2.x, In2.y );
	CVector2D v3;

	v3.Reflect( v1, v2 );

	LueVector2D vOut = { v3.x, v3.y };
	return vOut;
}


}

