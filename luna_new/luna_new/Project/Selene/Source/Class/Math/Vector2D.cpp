

//-----------------------------------------------------------------------------------
// INCLUDE
//-----------------------------------------------------------------------------------
#include "Base.h"		// PCH

#include "Math/Vector2D.h"


//-----------------------------------------------------------------------------------
// NAMESPACE
//-----------------------------------------------------------------------------------
using namespace Selene;


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D::CVector2D()
{
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D::CVector2D( const CVector2D &v )
{
	*this = v;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D::CVector2D( Float fPx, Float fPy )
{
	x = fPx;
	y = fPy;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Float CVector2D::LengthSq( void )
{
	return ((x * x) + (y * y));
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Float CVector2D::Length( void )
{
	return sqrtf( LengthSq() );
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Float CVector2D::Dot( CVector2D &In )
{
	return ((x * In.x) + (y * In.y));
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Normalize( CVector2D &In )
{
	Float div = 1.0f / In.Length();
	x = In.x * div;
	y = In.y * div;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Float CVector2D::Cross( CVector2D &In1, CVector2D &In2 )
{
	return ((In1.x * In2.y) - (In1.y * In2.x));
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Reflect( CVector2D &In1, CVector2D &In2 )
{
	Float dot = In1.Dot( In2 );

	x = In1.x - (2 * dot * In2.x);
	y = In1.y - (2 * dot * In2.y);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Normalize( void )
{
	Float div = 1.0f / Length();
	x *= div;
	y *= div;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Float CVector2D::Cross( CVector2D &In )
{
	CVector2D vTemp = *this;

	return ((vTemp.x * In.y) - (vTemp.y * In.x));
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Reflect( CVector2D &In )
{
	CVector2D vTemp = *this;
	Float dot = In.Dot( vTemp );

	x = In.x - (2 * dot * vTemp.x);
	y = In.y - (2 * dot * vTemp.y);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Scaling( Float sx, Float sy )
{
	x *= sx;
	y *= sy;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Translation( Float px, Float py )
{
	x += px;
	y += py;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Add( CVector2D &In1, CVector2D &In2 )
{
	x = In1.x + In2.x;
	y = In1.y + In2.y;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Sub( CVector2D &In1, CVector2D &In2 )
{
	x = In1.x - In2.x;
	y = In1.y - In2.y;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CVector2D::Set( Float fPx, Float fPy )
{
	x = fPx;
	y = fPy;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D &CVector2D::operator += ( const CVector2D& v )
{
    x += v.x;
    y += v.y;
    return *this;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D &CVector2D::operator -= ( const CVector2D& v )
{
    x -= v.x;
    y -= v.y;
    return *this;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D &CVector2D::operator *= ( Float f )
{
    x *= f;
    y *= f;
    return *this;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D &CVector2D::operator /= ( Float f )
{
    Float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    return *this;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D CVector2D::operator + () const
{
    return *this;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D CVector2D::operator - () const
{
    return CVector2D(-x, -y);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D CVector2D::operator + ( const CVector2D& v ) const
{
    return CVector2D(x + v.x, y + v.y);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D CVector2D::operator - ( const CVector2D& v ) const
{
    return CVector2D(x - v.x, y - v.y);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D CVector2D::operator * ( Float f ) const
{
    return CVector2D(x * f, y * f);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D CVector2D::operator / ( Float f ) const
{
    Float fInv = 1.0f / f;
    return CVector2D(x * fInv, y * fInv);
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CVector2D operator * ( Float f, const CVector2D& v )
{
    return CVector2D(f * v.x, f * v.y);
}

