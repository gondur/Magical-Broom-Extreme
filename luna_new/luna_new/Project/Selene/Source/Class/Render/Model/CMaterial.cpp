

//-----------------------------------------------------------------------------------
// INCLUDE
//-----------------------------------------------------------------------------------
#include "Base.h"		// PCH
#include "Surface/CTexture.h"
#include "Render/Model/CMaterial.h"

#if ENABLE_3D

//-----------------------------------------------------------------------------------
// NAMESPACE
//-----------------------------------------------------------------------------------
using namespace Selene;


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CMaterial::CMaterial()
	: m_vMaterialColor	( 1.0f, 1.0f, 1.0f, 1.0f )
	, m_vSpecularColor	( 0.5f, 0.5f, 0.5f, 0.5f )
	, m_fRefractive		( 20.0f * 20.0f )
	, m_fRoughly		( 0.5f * 0.5f )
	, m_VertexStart		( 0 )
	, m_VertexCount		( 0 )
	, m_IndexStart		( 0 )
	, m_IndexCount		( 0 )
{
	for ( Uint32 i = 0; i < MESH_TEXTURE_MAX; i++ )
	{
		m_pTexture[i] = NULL;
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CMaterial::~CMaterial()
{
	for ( Uint32 i = 0; i < MESH_TEXTURE_MAX; i++ )
	{
		SAFE_RELEASE( m_pTexture[i] );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetTexture( Uint32 Stage, CTexture *pTexture ) 
{
	SAFE_RELEASE( m_pTexture[Stage] );
	m_pTexture[Stage] = pTexture;
	if ( pTexture != NULL )
	{
		pTexture->AddRef();
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CTexture *CMaterial::GetTexturePointer( Uint32 Stage ) const
{
	return m_pTexture[Stage];
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetColor( const CVector4D &Color )
{
	m_vMaterialColor = Color;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
const CVector4D &CMaterial::GetColor( void )const
{
	return m_vMaterialColor;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetSpecularColor( const CVector4D &Color )
{
	m_vSpecularColor = Color;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
const CVector4D &CMaterial::GetSpecularColor( void ) const
{
	return m_vSpecularColor;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetSpecularRefractive( const Float fRefractive )
{
	m_fRefractive = fRefractive * fRefractive;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
const Float &CMaterial::GetSpecularRefractive( void ) const
{
	return m_fRefractive;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetSpecularRoughly( const Float fRoughly )
{
	m_fRoughly = fRoughly * fRoughly;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
const Float &CMaterial::GetSpecularRoughly( void ) const
{
	return m_fRoughly;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetVertexStart( Uint32 Start )
{
	m_VertexStart = Start;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetVertexCount( Uint32 Count )
{
	m_VertexCount = Count;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetIndexStart( Uint32 Start )
{
	m_IndexStart = Start;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CMaterial::SetIndexCount( Uint32 Count )
{
	m_IndexCount = Count;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Uint32 CMaterial::GetVertexStart( void )
{
	return m_VertexStart;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Uint32 CMaterial::GetVertexCount( void )
{
	return m_VertexCount;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Uint32 CMaterial::GetIndexStart( void )
{
	return m_IndexStart;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Uint32 CMaterial::GetIndexCount( void )
{
	return m_IndexCount;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CMaterial& CMaterial::operator = ( CMaterial &Src )
{
	for ( Uint32 i = 0; i < MESH_TEXTURE_MAX; i++ )
	{
		SetTexture( i, Src.GetTexturePointer( i ) );
	}

	SetColor( Src.GetColor() );
	SetVertexStart( Src.GetVertexStart() );
	SetVertexCount( Src.GetVertexCount() );
	SetIndexStart( Src.GetIndexStart() );
	SetIndexCount( Src.GetIndexCount() );

	return *this;
}

#endif // ENABLE_3D
