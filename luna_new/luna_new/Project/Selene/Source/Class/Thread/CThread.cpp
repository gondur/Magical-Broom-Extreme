

//-----------------------------------------------------------------------------------
// INCLUDE
//-----------------------------------------------------------------------------------
#include "Base.h"		// PCH
#include "CThread.h"


//-----------------------------------------------------------------------------------
// NAMESPACE
//-----------------------------------------------------------------------------------
using namespace Selene;


//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CThread::CThread()
	: m_pData		( NULL )
	, m_hThread		( NULL )
	, m_ThreadId	( 0 )
{
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
CThread::~CThread()
{
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Bool CThread::Create( void (*pThreadFunc)( void* ), void *pData )
{
	if ( m_hThread == NULL )
	{
		m_pData = pData;
		m_pMainProc = pThreadFunc;
		m_hThread = (HANDLE)::_beginthreadex( NULL, 0, ThreadFunc, this, 0, (unsigned int*)&m_ThreadId );

		return m_hThread != NULL;
	}

	return false;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CThread::WaitForExit( Sint32 TimeOut )
{
	if ( m_hThread != NULL )
	{
		::WaitForSingleObject( m_hThread, TimeOut == -1 ? INFINITE : TimeOut );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
Bool CThread::SetPriority( Sint32 Priority )
{
	if ( m_hThread != NULL )
	{
		return ::SetThreadPriority( m_hThread, Priority ) != FALSE;
	}

	return false;
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CThread::Resume( void )
{
	if ( m_hThread != NULL )
	{
		::ResumeThread( m_hThread );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
void CThread::Suspend( void )
{
	if ( m_hThread != NULL )
	{
		::SuspendThread( m_hThread );
	}
}

//-----------------------------------------------------------------------------------
/**
*/
//-----------------------------------------------------------------------------------
unsigned __stdcall CThread::ThreadFunc( void* pArguments )
{
	CThread *pThread = (CThread*)pArguments;

	pThread->m_pMainProc( pThread->m_pData );

	pThread->m_pData	= NULL;
	pThread->m_hThread	= NULL;
	pThread->m_ThreadId	= 0;

	::_endthreadex( 0 );

	return 0;
}

