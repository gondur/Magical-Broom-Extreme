

//----------------------------------------------------------------------------------
// INCLUDE
//----------------------------------------------------------------------------------
#include "../../../../../Include/Selene.h"


//----------------------------------------------------------------------------------
// NAMESPACE
//----------------------------------------------------------------------------------
using namespace Selene;


//----------------------------------------------------------------------------------
// DEFINE
//----------------------------------------------------------------------------------
#define SCREEN_WIDTH	(640)		// 画面横幅
#define SCREEN_HEIGHT	(480)		// 画面縦幅

#define BALL_MAX		(256)		// ボールの数
#define BALL_SIZE		(32)		// ボールの画像サイズ
#define BALL_TYPE_MAX	(9)			// ボールの種類


//----------------------------------------------------------------------------------
// STRUCT
//----------------------------------------------------------------------------------
typedef struct SBallData
{
	Float Px;
	Float Py;
	Float Mx;
	Float My;
}
SBallData;


//----------------------------------------------------------------------------------
// VARIABLE
//----------------------------------------------------------------------------------
static SBallData g_BallData[BALL_MAX];


//----------------------------------------------------------------------------------
/**
	@brief メイン関数

	@param hInstance		[in] 現在のインスタンスのハンドル
	@param hPrevInstance	[in] 以前のインスタンスのハンドル
	@param lpCmdLine		[in] コマンドライン
	@param nCmdShow			[in] 表示状態

	コンソールアプリケーションでいう所の main() 関数です。
	ウィンドウズアプリケーションでは以下の関数が main() になります。
*/
//----------------------------------------------------------------------------------
int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{
	ICore *pCore				= NULL;
	IGraphicCard *pGraphicCard	= NULL;
	IDevice *pDevice			= NULL;
	IRender *pRender			= NULL;
	ISprite2D *pSpr				= NULL;
	ITexture *pTex				= NULL;
	IFileManager *pFileMgr		= NULL;

	CTextureConfig Conf;
	CRect2D<Sint32> Src, Dst;
	Sint32 i, Type, Angle;

	//----------------------------------------------------------------------------
	// システムの初期化
	//----------------------------------------------------------------------------
	// Seleneのシステムを初期化しています。
	// 起動時に必ず呼び出してください。
	System::Initialize();

	//----------------------------------------------------------------------------
	// コアの生成
	//----------------------------------------------------------------------------
	// システムからICoreインターフェイスを取得しています。
	// アプリケーションウィンドウに関するインターフェイスであり、
	// システム内に１つだけ存在します。
	pCore = System::CreateCore();

	//----------------------------------------------------------------------------
	// 初期化
	//----------------------------------------------------------------------------
	// ICoreインターフェイスの初期化を行います。
	// アプリケーションウィンドウに関しての各種初期化が行われます。
	if ( pCore->Initialize( L"Selene Sample Program", FRAME_RATE_60 ) )
	{
		//-----------------------------------------------------------------
		// グラフィックカードを取得
		//-----------------------------------------------------------------
		// グラフィックカードに関しての初期化を行います。
		// IGraphicCardインターフェイスからは接続された
		// グラフィックカードの能力を取得する事が可能です。
		// IGraphicCardインターフェイスは1つのICoreインターフェイスに対して1つしか存在しません。
		pGraphicCard = pCore->CreateGraphicCard( GRAPHIC_CARD_DEFAULT_NO, VERTEXSHADER_VERSION_2_0 );
		if ( pGraphicCard == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// ウィンドウ作成
		//-----------------------------------------------------------------
		// ICoreインターフェイス内の情報に従ってアプリケーション
		// ウィンドウを生成します。
		// IGraphicCardからの情報を元に画面解像度などを変更する場合は、
		// ICore::Start()を呼び出す前に行ってください。
		pCore->Start( SCREEN_WIDTH, SCREEN_HEIGHT, true );

		//-----------------------------------------------------------------
		// ファイル登録
		//-----------------------------------------------------------------
		// ファイルマネージャーを生成
		pFileMgr = pCore->CreateFileMgr();
		// コアに設定
		pCore->SetFileManager( pFileMgr );
		// 読み込み先ルートディレクトリ設定
		pFileMgr->SetLoadPath( 0, L"Data", L"Data.bin" );
		// ルートディレクトリに対して読み込むカレントディレクトリ設定
		pFileMgr->SetCurrentDirectory( L"2D\\Sprite" );

		//-----------------------------------------------------------------
		// デバイスを取得
		//-----------------------------------------------------------------
		// IGraphicCardで接続されているグラフィックカードから
		// 描画用のデバイスを作成します。
		// IDeviceインターフェイスは1つのIGraphicCardインターフェイスに対して1つしか存在しません。
		pDevice = pGraphicCard->CreateDevice();
		if ( pDevice == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// レンダラーを取得
		//-----------------------------------------------------------------
		// 作成したデバイスから画面描画用のレンダラーを取得します。
		// IRenderインターフェイスは1つのIDeviceインターフェイスに対して1つしか存在しません。
		pRender = pDevice->CreateRender();
		if ( pRender == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// テクスチャの読み込み
		//-----------------------------------------------------------------
		// テクスチャ生成用のオプション設定
		//  0,255,0 の色をカラーキーに設定
		Conf.SetColorKey( CColor(0,255,0,255) );
		Conf.SetFormat( FORMAT_TEXTURE_2D );

		pRender->SetTextureConfig( Conf );

		// 画像ファイルからテクスチャ読み込み
		//  DirectXで扱うテクスチャのサイズは２の階乗である必要があります。
		//  １辺のピクセル数が 1、2、4、8、16、32、64、128、256、512、1024、2048 である必要があります。
		pTex = pRender->CreateTextureFromFile( L"Ball.bmp" );

		//-----------------------------------------------------------------
		// スプライト生成
		//-----------------------------------------------------------------
		// スプライト用バッファを生成
		//  三角形2枚で四角形を作るので、四角形1つに大して6個の頂点が必要です。
		//  また作成時に使用するテクスチャを渡します。
		pSpr = pRender->CreateSprite2D( BALL_MAX * 6, pTex );

		//--------------------------------------------------------
		// ボール情報初期化
		//--------------------------------------------------------
		for ( i = 0; i < BALL_MAX; i++ )
		{
			Angle = rand() % ANGLE_MAX;
			g_BallData[i].Px = (Float)(rand() % (SCREEN_WIDTH  - BALL_SIZE));	// 初期位置
			g_BallData[i].Py = (Float)(rand() % (SCREEN_HEIGHT - BALL_SIZE));	// 初期位置
			g_BallData[i].Mx = Math::Cos( Angle ) * 2.0f;						// 移動方向
			g_BallData[i].My = Math::Sin( Angle ) * 2.0f;						// 移動方向
		}

		//-----------------------------------------------------------------
		// メインループ
		//-----------------------------------------------------------------
		// アプリケーションウィンドウのウィンドウメッセージの処理と、
		// ICoreインターフェイス経由で設定されたフレーム制御を行います。
		// またキー入力の更新や画面の更新もこの関数内で行われます。
		// この関数はウィンドウが終了されるとfalseを返します。
		// その場合、ただちにアプリケーションを終了するようにして下さい。
		while ( pCore->Run() )
		{
			/////////////////////////////////////////////////////////////////////////////////////////////
			// 画面クリア
			/////////////////////////////////////////////////////////////////////////////////////////////

			// 裏画面のクリア
			pDevice->Clear( 0x00303030 );

			/////////////////////////////////////////////////////////////////////////////////////////////
			// 画面へのスプライト描画
			/////////////////////////////////////////////////////////////////////////////////////////////

			// 画面への描画を開始
			//   IRenderインターフェイスへ画面への描画を開始することを通知します。
			//   この関数を呼ばないと画面への描画が正しく行われません。
			pRender->Begin();

			// スプライトのレンダリング
			//   内部で作成したバッファを画面にレンダリングします。
			pSpr->Rendering();

			// 画面への描画を完了
			//  IRenderインターフェイスに対して、
			//  画面への描画が完了したことを通知します。
			pRender->End();

			/////////////////////////////////////////////////////////////////////////////////////////////
			// ボールデータの更新
			/////////////////////////////////////////////////////////////////////////////////////////////

			// ボールの位置情報を更新
			for ( i = 0; i < BALL_MAX; i++ )
			{
				g_BallData[i].Px += g_BallData[i].Mx;
				g_BallData[i].Py += g_BallData[i].My;

				// 左移動時、画面端まで言った反転
				if ( (g_BallData[i].Mx < 0) && (g_BallData[i].Px <= 0) )
				{
					g_BallData[i].Mx = -g_BallData[i].Mx;
				}
				// 右移動時、画面端まで言った反転
				if ( (g_BallData[i].Mx > 0) && (g_BallData[i].Px + BALL_SIZE >= SCREEN_WIDTH) )
				{
					g_BallData[i].Mx = -g_BallData[i].Mx;
				}
				// 上移動時、画面端まで言った反転
				if ( (g_BallData[i].My < 0) && (g_BallData[i].Py <= 0) )
				{
					g_BallData[i].My = -g_BallData[i].My;
				}
				// 下移動時、画面端まで言った反転
				if ( (g_BallData[i].My > 0) && (g_BallData[i].Py + BALL_SIZE >= SCREEN_HEIGHT) )
				{
					g_BallData[i].My = -g_BallData[i].My;
				}
			}

			/////////////////////////////////////////////////////////////////////////////////////////////
			// スプライトへの描画リクエスト
			/////////////////////////////////////////////////////////////////////////////////////////////

			// スプライトへの描画開始を通知
			pSpr->Begin();

			// スプライトに対してボールを描画
			for ( i = 0; i < BALL_MAX; i++ )
			{
				// 描画位置
				Dst.x = toI(g_BallData[i].Px);
				Dst.y = toI(g_BallData[i].Py);
				Dst.w = BALL_SIZE;
				Dst.h = BALL_SIZE;
				// テクスチャ位置
				Type = i % BALL_TYPE_MAX;
				Src.x = (Type % 3) * BALL_SIZE;
				Src.y = (Type / 3) * BALL_SIZE;
				Src.w = BALL_SIZE;
				Src.h = BALL_SIZE;
				// スプライトに描画をリクエスト
				pSpr->DrawSquare( Dst, Src, CColor(255,255,255) ); 
			}

			// スプライトへの描画完了を通知
			pSpr->End();

			/////////////////////////////////////////////////////////////////////////////////////////////
		}
EXIT:
		// ファイルマネージャー解放
		SAFE_RELEASE( pFileMgr );

		// フォントスプライトの解放
		SAFE_RELEASE( pSpr );

		// テクスチャの解放
		SAFE_RELEASE( pTex );

		// レンダラーの解放
		SAFE_RELEASE( pRender );

		// デバイスの解放
		SAFE_RELEASE( pDevice );

		// グラフィックカードの解放
		SAFE_RELEASE( pGraphicCard );
	}

	// コアの解放
	SAFE_RELEASE( pCore );

	//--------------------------------------------------------
	// システムの解放
	//--------------------------------------------------------
	// アプリケーションの終了時に必ず呼び出して下さい。
	// またこの関数を呼び出す前に取得した全ての
	// インターフェイスを解放してください。
	System::Finalize();

	return 0;
}


