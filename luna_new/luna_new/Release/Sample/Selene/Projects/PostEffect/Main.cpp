

//----------------------------------------------------------------------------------
// INCLUDE
//----------------------------------------------------------------------------------
#include "../../../../Include/Selene.h"


//-----------------------------------------------------------------------------------
// NAMESPACE
//-----------------------------------------------------------------------------------
using namespace Selene;


//-----------------------------------------------------------------------------------
// DEFINE
//-----------------------------------------------------------------------------------
#define SCREEN_WIDTH			(256*2)
#define SCREEN_HEIGHT			(256*2)


//-----------------------------------------------------------------------------------
/**
	一般的なウィンドウズアプリケーションでのmain()関数に相当するものです。

	@param hInstance		[in] インスタンスのハンドル
	@param hPrevInstance	[in] Win3.1時代の名残（NULL)
	@param lpCmdLine		[in] コマンドラインが格納された文字列へのポインタ
	@param nCmdShow			[in] ウィンドウをどのように表示するかの指定

	@return		終了コード
*/
//-----------------------------------------------------------------------------------
int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{
	ICore *pCore				= NULL;
	IFileManager *pFileMgr		= NULL;
	IGraphicCard *pGraphicCard	= NULL;
	IDevice *pDevice			= NULL;
	IRender *pRender			= NULL;
	IPostEffect *pPostEffect	= NULL;
	ITexture *pTexBase			= NULL;
	ITexture *pTexRule			= NULL;

	//----------------------------------------------------------------------------
	// システムの初期化
	//----------------------------------------------------------------------------
	// Seleneのシステムを初期化しています。
	// 起動時に必ず呼び出してください。
	System::Initialize();

	//----------------------------------------------------------------------------
	// コアの生成
	//----------------------------------------------------------------------------
	// システムからICoreインターフェイスを取得しています。
	// アプリケーションウィンドウに関するインターフェイスであり、
	// システム内に１つだけ存在します。
	pCore = System::CreateCore();

	//----------------------------------------------------------------------------
	// 初期化
	//----------------------------------------------------------------------------
	// ICoreインターフェイスの初期化を行います。
	// アプリケーションウィンドウに関しての各種初期化が行われます。
	if ( pCore->Initialize( L"Selene Sample Program", FRAME_RATE_60 ) )
	{
		//-----------------------------------------------------------------
		// ファイル登録
		//-----------------------------------------------------------------
		// ファイルマネージャーを生成
		pFileMgr = pCore->CreateFileMgr();
		// コアに設定
		pCore->SetFileManager( pFileMgr );
		// 読み込み先ルートディレクトリ設定
		pFileMgr->SetLoadPath( 0, L"Data", L"Data.bin" );
		// ルートディレクトリに対して読み込むカレントディレクトリ設定
		pFileMgr->SetCurrentDirectory( L"PostEffect" );

		//-----------------------------------------------------------------
		// グラフィックカードを取得
		//-----------------------------------------------------------------
		// グラフィックカードに関しての初期化を行います。
		// IGraphicCardインターフェイスからは接続された
		// グラフィックカードの能力を取得する事が可能です。
		// IGraphicCardインターフェイスは1つのICoreインターフェイスに対して1つしか存在しません。
		pGraphicCard = pCore->CreateGraphicCard( GRAPHIC_CARD_DEFAULT_NO, VERTEXSHADER_VERSION_2_0 );
		if ( pGraphicCard == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// ウィンドウ作成
		//-----------------------------------------------------------------
		// ICoreインターフェイス内の情報に従ってアプリケーション
		// ウィンドウを生成します。
		// IGraphicCardからの情報を元に画面解像度などを変更する場合は、
		// ICore::Start()を呼び出す前に行ってください。
		pCore->Start( SCREEN_WIDTH, SCREEN_HEIGHT, true );

		//-----------------------------------------------------------------
		// デバイスを取得
		//-----------------------------------------------------------------
		// IGraphicCardで接続されているグラフィックカードから
		// 描画用のデバイスを作成します。
		// IDeviceインターフェイスは1つのIGraphicCardインターフェイスに対して1つしか存在しません。
		pDevice = pGraphicCard->CreateDevice();
		if ( pDevice == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// レンダラーを取得
		//-----------------------------------------------------------------
		// 作成したデバイスから画面描画用のレンダラーを取得します。
		// IRenderインターフェイスは1つのIDeviceインターフェイスに対して1つしか存在しません。
		pRender = pDevice->CreateRender();
		if ( pRender == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// ポストエフェクトインターフェイス取得
		//-----------------------------------------------------------------
		// 作成したレンダラーから画面描画用のポストエフェクトを取得します。
		pPostEffect = pRender->CreatePostEffect();
		if ( pPostEffect == NULL ) goto EXIT;

		//-----------------------------------------------------------------
		// テクスチャ読み込み
		//-----------------------------------------------------------------
		pTexBase = pRender->CreateTextureFromFile( L"Base.bmp" );
		pTexRule = pRender->CreateTextureFromFile( L"Rule.bmp" );

		//-----------------------------------------------------------------
		// 描画ステート
		//-----------------------------------------------------------------
		// 描画モード設定
		//   描画モードを設定しています。
		//   ここではそのままの状態で描画します。
		pRender->SetDrawType( DRAW_TYPE_BLEND );

		//-----------------------------------------------------------------
		// メインループ
		//-----------------------------------------------------------------
		// アプリケーションウィンドウのウィンドウメッセージの処理と、
		// ICoreインターフェイス経由で設定されたフレーム制御を行います。
		// またキー入力の更新や画面の更新もこの関数内で行われます。
		// この関数はウィンドウが終了されるとfalseを返します。
		// その場合、ただちにアプリケーションを終了するようにして下さい。
		while ( pCore->Run() )
		{
			/////////////////////////////////////////////////////////////////////////////////////////////
			// 画面クリア
			/////////////////////////////////////////////////////////////////////////////////////////////

			// 裏画面のクリア
			pDevice->Clear( 0x00303030 );

			/////////////////////////////////////////////////////////////////////////////////////////////
			// 画面へのレンダリング
			/////////////////////////////////////////////////////////////////////////////////////////////

			// 画面への描画を開始
			//   IRenderインターフェイスへ画面への描画を開始することを通知します。
			//   この関数を呼ばないと画面への描画が正しく行われません。
			pRender->Begin();

			// 0.0〜1.0
			Float fRate = (Math::Cos( pCore->GetSyncCount() * 256 ) + 1.0f) * 0.5f;

			// テクスチャを用いた単純なレンダリング
			{
				CRect2D<Sint32> Dst( 0, 0, 256, 256 );
				CRect2D<Sint32> Src( 0, 0, 256, 256 );
				pPostEffect->SingleTexture( Dst, 0xFFFFFFFF, Src, pTexBase );
			}

			// テクスチャをグレースケール化してレンダリング
			// ピクセルシェーダー1.1サポート必須
			{
				CRect2D<Sint32> Dst( 256, 0, 256, 256 );
				CRect2D<Sint32> Src(   0, 0, 256, 256 );
				pPostEffect->Grayscale( Dst, 0xFFFFFFFF, Src, pTexBase, fRate );
			}

			// ルール画像を用いてユニバーサルトランジション
			// ピクセルシェーダー1.1サポート必須
			{
				CRect2D<Sint32> Dst( 0, 256, 256, 256 );
				CRect2D<Sint32> SrcBase( 0, 0, 256, 256 );
				CRect2D<Sint32> SrcRule( 0, 0, 128, 128 );
				pPostEffect->UniversalTransition( Dst, fRate, SrcBase, pTexBase, SrcRule, pTexRule );
			}

			// テクスチャをぼかしてレンダリング
			// ピクセルシェーダー1.1サポート必須
			{
				CRect2D<Sint32> Dst( 256, 256, 256, 256 );
				CRect2D<Sint32> Src(   0, 0, 256, 256 );
				pPostEffect->Blur16Box( Dst, 0xFFFFFFFF, Src, pTexBase );
			}

			// 画面への描画を完了
			//  IRenderインターフェイスに対して、
			//  画面への描画が完了したことを通知します。
			pRender->End();

			/////////////////////////////////////////////////////////////////////////////////////////////
		}

EXIT:
		// テクスチャの解放
		SAFE_RELEASE( pTexRule );
		SAFE_RELEASE( pTexBase );

		// ポストエフェクトの解放
		SAFE_RELEASE( pPostEffect );

		// レンダラーの解放
		SAFE_RELEASE( pRender );

		// デバイスの解放
		SAFE_RELEASE( pDevice );

		// グラフィックカードの解放
		SAFE_RELEASE( pGraphicCard );

		// ファイルマネージャー解放
		SAFE_RELEASE( pFileMgr );
	}

	// コアの解放
	SAFE_RELEASE( pCore );

	//--------------------------------------------------------
	// システムの解放
	//--------------------------------------------------------
	// アプリケーションの終了時に必ず呼び出して下さい。
	// またこの関数を呼び出す前に取得した全ての
	// インターフェイスを解放してください。
	System::Finalize();

	return 0;
}


