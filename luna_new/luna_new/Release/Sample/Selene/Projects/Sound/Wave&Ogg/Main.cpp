

//----------------------------------------------------------------------------------
// INCLUDE
//----------------------------------------------------------------------------------
#include "../../../../../Include/Selene.h"


//----------------------------------------------------------------------------------
// NAMESPACE
//----------------------------------------------------------------------------------
using namespace Selene;


//----------------------------------------------------------------------------------
// PROTOTYPE
//----------------------------------------------------------------------------------
static BOOL FileOpenDialog( wchar_t *pPath, const wchar_t *pTitle, const wchar_t *pFilter );


//----------------------------------------------------------------------------------
// DEFINE
//----------------------------------------------------------------------------------
#define SCREEN_WIDTH	(640)		// 画面横幅
#define SCREEN_HEIGHT	(480)		// 画面縦幅


//----------------------------------------------------------------------------------
/**
	@brief メイン関数

	@param hInstance		[in] 現在のインスタンスのハンドル
	@param hPrevInstance	[in] 以前のインスタンスのハンドル
	@param lpCmdLine		[in] コマンドライン
	@param nCmdShow			[in] 表示状態

	コンソールアプリケーションでいう所の main() 関数です。
	ウィンドウズアプリケーションでは以下の関数が main() になります。
*/
//----------------------------------------------------------------------------------
int WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow )
{
	wchar_t FilePath[MAX_PATH];
	ICore *pCore			= NULL;
	ISound *pSound			= NULL;
	IFileManager *pFileMgr	= NULL;

	//----------------------------------------------------------------------------
	// システムの初期化
	//----------------------------------------------------------------------------
	// Seleneのシステムを初期化しています。
	// 起動時に必ず呼び出してください。
	System::Initialize();

	//----------------------------------------------------------------------------
	// コアの生成
	//----------------------------------------------------------------------------
	// システムからICoreインターフェイスを取得しています。
	// アプリケーションウィンドウに関するインターフェイスであり、
	// システム内に１つだけ存在します。
	pCore = System::CreateCore();

	//----------------------------------------------------------------------------
	// 初期化
	//----------------------------------------------------------------------------
	// ICoreインターフェイスの初期化を行います。
	// アプリケーションウィンドウに関しての各種初期化が行われます。
	if ( pCore->Initialize( L"Selene Sample Program", FRAME_RATE_60 ) )
	{
		//-----------------------------------------------------------------
		// ウィンドウ作成
		//-----------------------------------------------------------------
		// ICoreインターフェイス内の情報に従ってアプリケーション
		// ウィンドウを生成します。
		// IGraphicCardからの情報を元に画面解像度などを変更する場合は、
		// ICore::Start()を呼び出す前に行ってください。
		pCore->Start( SCREEN_WIDTH, SCREEN_HEIGHT, true );

		//--------------------------------------------------------
		// ファイル登録
		//--------------------------------------------------------
		// ファイルマネージャーを生成
		pFileMgr = pCore->CreateFileMgr();
		// コアに設定
		pCore->SetFileManager( pFileMgr );

		//--------------------------------------------------------
		// サウンドファイルの読み込み
		//--------------------------------------------------------
		if ( !FileOpenDialog( FilePath, L"サウンド選択", L"サウンドファイル(*.wav *.ogg)\0*.wav;*.ogg\0\0" ) )
		{
			// ファイルが読み込めなかった
			goto EXIT;
		}

		// サウンドの読み込み
		//   サウンドをファイル指定して読み込みます。
		//   ドライバーにAyameを使用しているので、
		//   WAVE/圧縮WAVE/OGGの再生が行えます。
		pSound = pCore->CreateSoundFromFile( FilePath, false );
		if ( pSound == NULL )
		{
			goto EXIT;
		}

		// サウンドの再生
		pSound->Play(
			0xFFFFFFFF,				// ループ回数（無限
			0 );					// ループ後の先頭位置（サンプリング指定

		//-----------------------------------------------------------------
		// メインループ
		//-----------------------------------------------------------------
		// アプリケーションウィンドウのウィンドウメッセージの処理と、
		// ICoreインターフェイス経由で設定されたフレーム制御を行います。
		// またキー入力の更新や画面の更新もこの関数内で行われます。
		// この関数はウィンドウが終了されるとfalseを返します。
		// その場合、ただちにアプリケーションを終了するようにして下さい。
		while ( pCore->Run() )
		{
		}

EXIT:
		// サウンドの解放
		SAFE_RELEASE( pSound );

		// ファイルマネージャーの解放
		SAFE_RELEASE( pFileMgr );
	}

	// コアの解放
	SAFE_RELEASE( pCore );

	//--------------------------------------------------------
	// システムの解放
	//--------------------------------------------------------
	// アプリケーションの終了時に必ず呼び出して下さい。
	// またこの関数を呼び出す前に取得した全ての
	// インターフェイスを解放してください。
	System::Finalize();

	return 0;
}

//----------------------------------------------------------------------------------
/**
	@brief ファイル選択用ダイアログをだします。

	@param pPath	[out] ファイルが格納されるパス（MAX_PATHバイトのchar配列）
	@param pTitle	[in] ダイアログのタイトル
	@param pFilter	[in] 拡張子の指定
	@param pExt		[in] 拡張子

	@retval true	成功
	@retval false	失敗
*/
//----------------------------------------------------------------------------------
BOOL FileOpenDialog( wchar_t *pPath, const wchar_t *pTitle, const wchar_t *pFilter )
{
	OPENFILENAME ofn = { sizeof(OPENFILENAME) };
	ofn.hwndOwner		= GetActiveWindow();
	ofn.lpstrTitle		= pTitle;
	ofn.lpstrFilter		= pFilter;
	ofn.nFilterIndex	= 1;
	ofn.lpstrFile		= pPath;
	ofn.nMaxFile		= MAX_PATH;
	ofn.lpstrDefExt		= L".";
	ofn.Flags			= OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST | OFN_HIDEREADONLY;

	pPath[0] = L'\0';

	return GetOpenFileName( &ofn );
}


