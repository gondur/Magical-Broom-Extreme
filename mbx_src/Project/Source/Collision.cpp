//======================================================================================
//======================================================================================
//
//
//			当たり判定
//
//
//======================================================================================
//======================================================================================


//======================================================================================
//	include
//======================================================================================
#include "Collision.h"


//======================================================================================
//
//	当たり判定
//
//======================================================================================
bool Collision::Check( LPHITPOINT pt1, long cnt1, LPHITPOINT pt2, long cnt2 )
{
	//==========================================================
	// バウンディングボックス算出
	//==========================================================
	long x11 = pt1[0].x, x12 = pt1[0].x;
	long y11 = pt1[0].y, y12 = pt1[0].y;
	long x21 = pt2[0].x, x22 = pt2[0].x;
	long y21 = pt2[0].y, y22 = pt2[0].y;

	for ( long i = 1; i < cnt1; i++ )
	{
		if ( pt1[i].x < x11 ) x11 = pt1[i].x;
		ef ( pt1[i].x > x12 ) x12 = pt1[i].x;
		if ( pt1[i].y < y11 ) y11 = pt1[i].y;
		ef ( pt1[i].y > y12 ) y12 = pt1[i].y;
	}
	for ( long i = 1; i < cnt2; i++ )
	{
		if ( pt2[i].x < x21 ) x21 = pt2[i].x;
		ef ( pt2[i].x > x22 ) x22 = pt2[i].x;
		if ( pt2[i].y < y21 ) y21 = pt2[i].y;
		ef ( pt2[i].y > y22 ) y22 = pt2[i].y;
	}

	//----------------------------------------------------------
	// バウンディングボックスの接触判定
	//----------------------------------------------------------
	if ( x11 > x22 ) return false;
	if ( x12 < x21 ) return false;
	if ( y11 > y22 ) return false;
	if ( y12 < y21 ) return false;

	//==========================================================
	// 外積で判定
	//==========================================================

	//----------------------------------------------------------
	// p1の各頂点がp2の矩形内に入っているか
	//----------------------------------------------------------
	for ( long i = 0; i < cnt1; i++ )
	{
		bool result = true;
		for ( long j = 0; j < cnt2-1; j++ )
		{
			long x1 = pt2[j+0].x;
			long y1 = pt2[j+0].y;
			long x2 = pt2[j+1].x;
			long y2 = pt2[j+1].y;

			long x = pt1[i].x;
			long y = pt1[i].y;

			if ( (x-x1)*(y-y2) - (y-y1)*(x-x2) < 0 )
			{
				result = false;
				break;
			}
		}
		// 命中
		if ( result ) return true;
	}

	//----------------------------------------------------------
	// p2の各頂点がp1の矩形内に入っているか
	//----------------------------------------------------------
	for ( long i = 0; i < cnt2; i++ )
	{
		bool result = true;
		for ( long j = 0; j < cnt1-1; j++ )
		{
			long x1 = pt1[j+0].x;
			long y1 = pt1[j+0].y;
			long x2 = pt1[j+1].x;
			long y2 = pt1[j+1].y;

			long x = pt2[i].x;
			long y = pt2[i].y;

			if ( (x-x1)*(y-y2) - (y-y1)*(x-x2) < 0 )
			{
				result = false;
				break;
			}
		}
		// 命中
		if ( result ) return true;
	}

	//==========================================================
	// 各頂点が作る線分の交差判定
	//==========================================================
	for ( long i = 0; i < cnt1-1; i++ )
	{
		for ( long j = 0; j < cnt2-1; j++ )
		{
			if ( Intersect( pt1+i, pt1+i+1, pt2+j, pt2+j+1 ) )
			{
				return true;
			}
		}
	}

	return false;
}

//======================================================================================
//
//	線分同士の当たり判定
//
//======================================================================================
bool Collision::CheckLine( LPHITPOINT pt1, long cnt1, LPHITPOINT pt2, long cnt2 )
{
	//==========================================================
	// 各頂点が作る線分の交差判定
	//==========================================================
	for ( long i = 0; i < cnt1-1; i++ )
	{
		for ( long j = 0; j < cnt2-1; j++ )
		{
			if ( Intersect( &pt1[i], &pt1[i+1], &pt2[j], &pt2[j+1] ) )
			{
				return true;
			}
		}
	}

	return false;
}

//======================================================================================
//
//	線分の交差判定
//
//======================================================================================
bool Collision::Intersect( LPHITPOINT pt11, LPHITPOINT pt12, LPHITPOINT pt21, LPHITPOINT pt22 )
{
	LINEDATA l1 = { pt11->x, pt11->y, pt12->x, pt12->y };
	LINEDATA l2 = { pt21->x, pt21->y, pt22->x, pt22->y };

	return ( Straddle( &l1, &l2 ) && Straddle( &l2, &l1 ) );
}

//======================================================================================
//
//	線分同士の交差判定
//
//		線分Aを線分Bの両端がまたいで存在すれば交差している
//
//======================================================================================
bool Collision::Straddle( LPLINEDATA l1, LPLINEDATA l2 )
{
	// 線分l1,l2を対角線とする２つの長方形が交わらない場合、線分l1,l2は交わらない
	if ( min(l1->x1,l1->x2) > max(l2->x1,l2->x2) ) return 0;
	if ( min(l1->y1,l1->y2) > max(l2->y1,l2->y2) ) return 0;
	if ( min(l2->x1,l2->x2) > max(l1->x1,l1->x2) ) return 0;
	if ( min(l2->y1,l2->y2) > max(l1->y1,l1->y2) ) return 0;

	long n1 = Side( l2->x1, l2->y1, l1 );
	long n2 = Side( l2->x2, l2->y2, l1 );

	return ( (n1 * n2) < 0 );
}

//======================================================================================
//
//	点(x,y)が線分 l のどちら側にあるか調べる
//		線分 e の　右側にある場合  1 を、
//		線分 e の直線上にある場合  0 を、
//		線分 e の　左側にある場合 -1 を
//	返す
//
//======================================================================================
long Collision::Side( long x, long y, LPLINEDATA l )
{
	HITPOINT p1 = { x, y };
	HITPOINT p2 = { l->x1, l->y1 };
	HITPOINT p3 = { l->x2, l->y2 };

	long n = p1.x*(p2.y-p3.y)+p2.x*(p3.y-p1.y)+p3.x*(p1.y-p2.y);

	if ( n > 0 )	return +1;		// 右
	ef ( n < 0 )	return -1;		// 左
	else			return  0;		// 線上
}