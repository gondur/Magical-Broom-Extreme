 //======================================================================================
//======================================================================================
//
//
//			妖精
//
//
//======================================================================================
//======================================================================================


//======================================================================================
//	include
//======================================================================================
#include "Fairy.h"

long CFAIRY::FairyNum = 0;

//======================================================================================
//
//	コンストラクタ
//
//======================================================================================
CFAIRY::CFAIRY( void ) : CSPRITE( SORT_PLAYER )
{
	SetHitCount( 7 );
	Px = -500.0f;
	Py = 200;
	No = FairyNum++;;
	AnimeNo = 0;
	AnimeCount = 0;
	bHit = true;
}

//======================================================================================
//
//	処理
//
//======================================================================================
bool CFAIRY::Action( void )
{
	// 一番近いコイン検索
	float x = Px;
	float y = Py;
	ReferenceNear( &x, &y, SORT_COIN );

	//------------------------------------------
	// 座標計算
	//------------------------------------------
	const long add_angle[] = { 72, 36, 108 };
	const float add_speed[] = { 0.10f, 0.15f, 0.05f };

	// 目標との角度算出
	long a = LunaMath::Atan( (long)(x-Px), (long)(y-Py) );

	// 現在の角度との相対角度算出
	a = Angle - a;
	a &= 4095;

	// 角度に応じた処理
	if ( a > 2048 )	{ Angle += add_angle[No]; }
	else			{ Angle -= add_angle[No]; }
	Angle &= 4095;

	// 角度に応じてスピード調整
	if ( a < 256 || a > 3870 )
	{
		if ( (Speed += add_speed[No]) > 8 ) Speed = 8;
	}
	else
	{
		if ( (Speed -= add_speed[No]) < 3 ) Speed = 3;
	}

	Px += LunaMath::Cos( (long)Angle, (long)Speed );
	Py += LunaMath::Sin( (long)Angle, (long)Speed );

	//------------------------------------------
	// アニメ処理
	//------------------------------------------
	if ( ++AnimeCount == 3 )
	{
		AnimeCount = 0;
		if ( ++AnimeNo == 4 )
		{
			AnimeNo = 0;
		}
	}

	//------------------------------------------
	// 描画リストに追加
	//------------------------------------------
	long AnimeData[] = { 0, 1, 2, 1 };
	RECT src = { 214+No*31, 491+AnimeData[AnimeNo]*31,214+No*31+31, 491+AnimeData[AnimeNo]*31+31 };
	RECT dest = { (long)Px-16, (long)Py-16, (long)Px+16, (long)Py+16 };
	Sprite[4][0]->Draw( &dest, D3DCOLOR_XRGB(255,255,255), &src );

	//------------------------------------------
	// あたり判定
	//------------------------------------------
	lpHitPt[0].x =   0+Px;	lpHitPt[0].y = -15+Py;
	lpHitPt[1].x =  15+Px;	lpHitPt[1].y = -15+Py;
	lpHitPt[2].x =  15+Px;	lpHitPt[2].y =   0+Py;
	lpHitPt[3].x =   0+Px;	lpHitPt[3].y =  15+Py;
	lpHitPt[4].x = -15+Px;	lpHitPt[4].y =  15+Py;
	lpHitPt[5].x = -15+Px;	lpHitPt[5].y =   0+Py;
	lpHitPt[6] = lpHitPt[0];

	return bDeath;
}
