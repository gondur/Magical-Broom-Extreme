//======================================================================================
//======================================================================================
//
//
//			雪
//
//
//======================================================================================
//======================================================================================


//======================================================================================
//	include
//======================================================================================
#include "LaserFx.h"
#include "Application.h"


//======================================================================================
//
//		コンストラクタ
//
//======================================================================================
CLASERFX::CLASERFX( long lv ) : CSPRITE( SORT_NULL )
{
	// レベルごとの収束速度
	float scale[] = { 12, 14, 16, 18 };
	Speed = scale[lv];

	// レベルごとの収束サイズ
	const long size[] = { 50, 100, 150, 200 };

	// 適当な円状に生成
	float a = RAND_PAI;
	LunaMath::SinCosF( a, &x1, &y1 );
	x1 *= F(RAND(5,size[lv]));
	y1 *= F(RAND(5,size[lv]));
}

//======================================================================================
//
//		処理
//
//======================================================================================
bool CLASERFX::Action( void )
{
	float tx = CApplication::GetPlayer()->Px+90;
	float ty = CApplication::GetPlayer()->Py+28;

	// 初期設定値に収束するように移動
	x3 = LunaMath::AddSpeed( 0.0f, Speed, 50, Time );
	y3 = LunaMath::AddSpeed( 0.0f, Speed, 50, Time );
	Px = LunaMath::AddSpeed( tx+x1, tx, 50, Time );
	Py = LunaMath::AddSpeed( ty+y1, ty, 50, Time );
	if ( ++Time > 50 ) bDeath = true;

	// 描画
	RECT src = { 736, 478, 768, 510 };
	RECT dest = { (long)(Px-x3), (long)(Py-y3), (long)(Px+x3), (long)(Py+y3) };
	Sprite[7][1]->Draw( &dest, D3DCOLOR_XRGB(64,64,255), &src );

	return bDeath;
}