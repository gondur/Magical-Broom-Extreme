//======================================================================================
//======================================================================================
//
//
//			ショット
//
//
//======================================================================================
//======================================================================================


//======================================================================================
//	include
//======================================================================================
#include "Shot.h"
#include "Smoke.h"
#include "Sound.h"


//======================================================================================
//
//	コンストラクタ
//
//======================================================================================
CSHOT::CSHOT( float x, float y, long angle ) : CSPRITE( SORT_PLAYERSHOT )
{
	SetHitCount( 5 );
	Power = 50;
	Px = x;
	Py = y;
	Angle = angle;
	x1 = F(LunaMath::Cos( angle, 12<<16 )) / 65536.0f;
	y1 = F(LunaMath::Sin( angle, 12<<16 )) / 65536.0f;
	bHit = true;
	CSound::Play( SE_SHOT );
}

//======================================================================================
//
//	処理
//
//======================================================================================
bool CSHOT::Action( void )
{
	//-------------------------------------------
	// 処理
	//-------------------------------------------
	Px += x1;
	Py += y1;

	RECT dest = { (long)Px-16, (long)Py-4, (long)Px+16, (long)Py+4 };
	RECT src = { 520, 648, 552, 656 };
	Sprite[4][0]->DrawRotate( &dest, D3DCOLOR_XRGB(255,255,255), ANGLE2PAI(Angle), &src );

	if ( Px < -20 ) bDeath = true;
	ef ( Py < -20 ) bDeath = true;
	ef ( Px > 660 ) bDeath = true;
	ef ( Py > 420 ) bDeath = true;

	//-------------------------------------------
	// あたり判定
	//-------------------------------------------
	lpHitPt[0].x = -16;		lpHitPt[0].y = -4;
	lpHitPt[1].x = +16;		lpHitPt[1].y = -4;
	lpHitPt[2].x = +16;		lpHitPt[2].y = +4;
	lpHitPt[3].x = -16;		lpHitPt[3].y = +4;
	for ( long i = 0; i < 4; i++ )
	{
		LunaMath::RotatePoint( &lpHitPt[i].x, &lpHitPt[i].y, Angle );
		lpHitPt[i].x += Px;
		lpHitPt[i].y += Py;
	}
	lpHitPt[4] = lpHitPt[0];

	return bDeath;
}

//======================================================================================
//
//	ダメージ
//
//======================================================================================
void CSHOT::Damage( long pow )
{
	CSound::Play( SE_SHOT_HIT );
	bHit = false;
	bDeath = true;
	new CSMOKE( Px+RAND(10,20), Py+RAND(-5,5), 2048+RAND(-128,128), 2, 15, 60, 0 );
	new CSMOKE( Px+RAND(10,20), Py+RAND(-5,5), 2048+RAND(-128,128), 2, 15, 60, 0 );
	new CSMOKE( Px+RAND(10,20), Py+RAND(-5,5), 2048+RAND(-128,128), 2, 15, 60, 0 );
}